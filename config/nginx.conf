#user  nobody;
worker_processes  1;

error_log  /var/log/nginx/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


# see https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    # Default index page. All server and location directives will inherit this.
    index         index.html;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log          /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;

    gzip                on;

    # network address of proxied server - In our case the Docker containers running application logic
    # see https://docs.docker.com/compose/networking/
    # https://www.bogotobogo.com/DevOps/Docker/Docker-Compose-Nginx-Reverse-Proxy-Multiple-Containers.php
    # http://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream
    upstream backend {
        # NOTE: port exposed on container side
        server backend:3000; 
    }

    # reverse proxy for serving static contents and resulting speech audio data
    # Double check 1) Dockerfile build logic, 2) path of static contents specified
    # in html documents and 3) error logs above when Nginx can't find static content.
    server {
        # default root at the static content directory
        root                        /web;
        # NOTE: port exposed on container side
        listen                      80;
        server_name                 localhost;

        #charset koi8-r;
        access_log                  /var/log/nginx/host.access.log  main;

        # route to application main page and other static assets like js and css. Also act as the fallback
        # route. See https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#check-if-file-exists
        location / {
            try_files $uri /index.html;
        }

        location ~ "^/view/[0-9a-f]{32}$" {
            rewrite ^.*$ /view.html last;
            return 404; 
        }

        # https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/#passing-a-request-to-a-proxied-server
        # https://serverfault.com/questions/503002/nginx-simple-regex-location
        # http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
        location ~ "^/api/view/[0-9a-f]{32}$" {
          # rewrite the request so that we can pass the correct uri to application backend 
          rewrite   /api/view/([^/]+) /view/$1 break;
          proxy_pass                    http://backend;
        }

        location = /api/save {
          proxy_pass                    http://backend/save;
        }
    }
}
